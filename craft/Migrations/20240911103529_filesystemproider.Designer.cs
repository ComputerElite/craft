// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using craft.DB;

#nullable disable

namespace craft.Migrations
{
    [DbContext(typeof(CraftDbContext))]
    [Migration("20240911103529_filesystemproider")]
    partial class filesystemproider
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.33")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("craft.FileProvider.CraftFile", b =>
                {
                    b.Property<string>("uuid")
                        .HasColumnType("text");

                    b.Property<DateTime?>("created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("isDirectory")
                        .HasColumnType("boolean");

                    b.Property<bool>("isFileProviderRoot")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("lastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("path")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long?>("size")
                        .HasColumnType("bigint");

                    b.HasKey("uuid");

                    b.ToTable("files");
                });

            modelBuilder.Entity("craft.FileProvider.FileSystemFileProvider", b =>
                {
                    b.Property<string>("id")
                        .HasColumnType("text");

                    b.Property<string>("mountPoint")
                        .HasColumnType("text");

                    b.Property<string>("rootPath")
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.ToTable("filesSystemFileProviders");
                });

            modelBuilder.Entity("craft.Users.CraftPermission", b =>
                {
                    b.Property<string>("permissionUuid")
                        .HasColumnType("text");

                    b.Property<bool>("isSharedFilePermission")
                        .HasColumnType("boolean");

                    b.Property<string>("path")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("type")
                        .HasColumnType("integer");

                    b.Property<string>("userUuid")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("permissionUuid");

                    b.ToTable("permissions");
                });

            modelBuilder.Entity("craft.Users.CraftUser", b =>
                {
                    b.Property<string>("uuid")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<bool>("isPublicLinkUser")
                        .HasColumnType("boolean");

                    b.Property<string>("password")
                        .HasColumnType("text");

                    b.Property<string>("username")
                        .HasColumnType("text");

                    b.HasKey("uuid");

                    b.ToTable("users");
                });

            modelBuilder.Entity("craft.Users.CraftUserSession", b =>
                {
                    b.Property<string>("sessionId")
                        .HasColumnType("text");

                    b.Property<DateTime>("creationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("lastAccess")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("origin")
                        .HasColumnType("text");

                    b.Property<string>("userUuid")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("validUnti")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("sessionId");

                    b.ToTable("sessions");
                });
#pragma warning restore 612, 618
        }
    }
}
